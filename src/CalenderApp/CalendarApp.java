package CalenderApp;

import CalenderApp.entity.Calendar;
import CalenderApp.entity.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.*;

public class CalendarApp {
    static SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
    static Map<String, Long> users;
    static Map<Long, User> usersIds;
    static Long userAutoGeneratedId = 0L;
    static Map<Long, Calendar> calendars;
    static Long calendarAutoGeneratedId = 0L;
    static Long currentUserId;
    static Long currentCalendarId;
    static Long eventAutoGeneratedId = 0L;

    public static void main(String[] args) {
        if (users == null) {
            users = new HashMap<>();
        }

        if (calendars == null) {
            calendars = new HashMap<>();
        }

        //TODO::Get API calls via Command Line argument
        //Examples:
        // CREATE_USER name emailAddress
        // SWITCH_USER emailAddress
        // CREATE_CALENDAR title description
        // CREATE_EVENT MEETING title description "20-08-2023 8:30 AM" "20-08-2023 9:00AM"
        // CREATE_EVENT TASK title description "20-08-2023 8:30 AM" "20-08-2023 9:00AM"
    }

    static void createUser(String name, String emailAddress) {
        //for now ignoring case insensitivity
        if (users.containsKey(emailAddress)) {
            System.out.println(emailAddress + " already exists");
            return;
        }

        Long id = ++userAutoGeneratedId;
        User user = new User();
        user.setId(id);
        user.setName(name);
        user.setEmailAddress(emailAddress);
        users.put(emailAddress, id);
        usersIds.put(id, user);
        System.out.println("User created successfully with the email address " + emailAddress);

        if (currentUserId <= 0L) {
            currentUserId = id;
        }
    }

    static void switchUser(String emailAddress) {
        if (!users.containsKey(emailAddress)) {
            System.out.println(emailAddress + " not exists, please register the user");
            return;
        }
        //Switch to the new user
        User user = usersIds.get(users.get(emailAddress));
        currentUserId = user.getId();
        if (user.getCalendars() != null && !user.getCalendars().isEmpty()) {
            currentCalendarId = user.getCalendars().get(0).getId();
        } else {
            currentCalendarId = 0L;
        }

        System.out.println("User switched to " + user.getName());
    }

    static void createCalendar(String name, String description) {
        if (currentUserId <= 0L) {
            System.out.println("User not selected");
            return;
        }

        //Ignoring time zone for now and distinct name matching
        Long id = ++calendarAutoGeneratedId;
        Calendar calendar = new Calendar();
        calendar.setId(id);
        calendar.setName(name);
        calendar.setDescription(description);
        calendar.setTimeZone(TimeZone.getTimeZone(ZoneId.systemDefault()));

        //Save calendar against the current user
        User currentUser = usersIds.get(currentUserId);
        List<Calendar> userCalendars = currentUser.getCalendars();
        if (userCalendars == null) {
            userCalendars = new ArrayList<>();
        }
        userCalendars.add(calendar);
        currentUser.setCalendars(userCalendars);
        usersIds.put(currentUserId, currentUser);

        //Save the calendar
        calendars.put(id, calendar);
        System.out.println("Calendar creates successfully with the name " + name + "for the user " + currentUser.getName());

        if (currentCalendarId <= 0L) {
            currentCalendarId = id;
        }
    }

    static void createEvent(EventType eventType, String title, String description, String startTime, String endTime) throws ParseException {
        if (currentUserId <= 0L) {
            System.out.println("Please select user");
            return;
        }

        if (currentCalendarId <= 0L) {
            List<Calendar> userCalendars = usersIds.get(currentUserId).getCalendars();
            if (userCalendars != null && !userCalendars.isEmpty()) {
                currentCalendarId = userCalendars.get(0).getId();
            } else {
                System.out.println("There is no calender to attach to the event, please create calender first");
                return;
            }
        }

        Event event = getEvent(eventType);
        event.setId(++eventAutoGeneratedId);
        event.setTitle(title);
        event.setDescription(description);
        event.setStartTime(formatter.parse(startTime));
        event.setEndTime(formatter.parse(endTime));

        //link event with the calendar
        Calendar currentCalendar = calendars.get(currentCalendarId);
        List<Event> calendarEvents = currentCalendar.getEvents();
        if (calendarEvents == null) {
            calendarEvents = new ArrayList<>();
        }
        calendarEvents.add(event);

        calendars.put(currentCalendarId, currentCalendar);
    }

    static Event getEvent(EventType eventType) {
        if (eventType == EventType.MEETING) {
            return new MeetingEvent();
        } else {
            return new TaskEvent();
        }
    }
}
